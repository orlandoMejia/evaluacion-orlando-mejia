buildscript {
    repositories {
        maven {
            url "https://pkgs.dev.azure.com/BancoPichinchaEC/0f20bf47-c965-46fe-8bd4-91df57fbb2e7/_packaging/Framework/maven/v1"
            name "BancoPichinchaEC"
            credentials {
                username = "BancoPichinchaEC"
                password = System.getenv("ARTIFACT_TOKEN")
            }
        }
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:6.6.0"
        classpath "com.pichincha:optimus-generateunittest:2.0.1"
    }
}

 

plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id "jacoco"
}

 

springBoot {
    mainClass = "com.pichincha.dm.OptimusMainApplication"
}

 

apply plugin: 'java'
apply plugin: 'org.openapi.generator'

 

group = "com.pichincha.dm"
version = '1.0.1'
sourceCompatibility = '17'

 

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

 

ext['log4j2.version'] = '2.17.1'

 

repositories {
    mavenCentral()
    maven {
        url "https://pkgs.dev.azure.com/BancoPichinchaEC/0f20bf47-c965-46fe-8bd4-91df57fbb2e7/_packaging/Framework/maven/v1"
        name "BancoPichinchaEC"
        credentials {
            username = "BancoPichinchaEC"
            password = System.getenv("ARTIFACT_TOKEN")
        }
    }    
}

 

ext {
    mapstructVersion = "1.4.2.Final"
    lombokVersion = "1.18.26"
    set('springCloudVersion', "2022.0.3")
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    //dependency Base
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //dependencies for default
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'

    // dependency from optimus
    implementation group: 'org.mapstruct' , name: 'mapstruct' , version: '1.5.3.Final'
    annotationProcessor group: 'org.mapstruct' , name: 'mapstruct-processor' , version: '1.5.3.Final'
    compileOnly group: 'org.projectlombok' , name: 'lombok' , version: ''
    implementation group: 'com.h2database' , name: 'h2' , version: '2.1.214'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.20'

    //dependencias para redis
    

    //dependencias para circuit breaker
    

    //dependencias feing o web client
    

    //test
    implementation group: "com.pichincha", name: "optimus-generateunittest", version: "2.0.1"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
}
task buildSpringServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "com.pichincha.services.server"
    modelPackage = "com.pichincha.services.server.models"
    library = "spring-boot"
    configOptions = [
      useSpringBoot3                          : "true",
      useJakartaEe                            : "true",
      serializableModel                       : "true",
      dateLibrary                             : "java8",
      openApiNullable                         : "false",
      apiFirst                                : "false",
      delegatePattern                         : "true",
      configPackage                           : "com.pichincha.services.config",
      sourceFolder                            : "src/main/java",
      basePackage                             : "com.pichincha",
      disallowAdditionalPropertiesIfNotPresent: "true",
      interfaceOnly                           : "true"
]
}

 

compileJava.dependsOn buildSpringServer 

task optimusCreateUnitTest(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.pichincha.test.core.ProcessMain'
} 

compileJava {
    options.compilerArgs += [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.verbose=true',
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

 

sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

 

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

 

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/pichincha/services/*OpenAPI2SpringBoot*",
                    "com/pichincha/services/*RFC3339DateFormat*",
                    "com/pichincha/services/data/*",
                    "com/pichincha/services/server/*",
                    "com/pichincha/services/configuration/*",
                    "com/pichincha/services/config/*",
                    "com/pichincha/services/client/*",
                    "com/pichincha/services/repository/*",
                    "com/pichincha/services/server/models/*",
                    "com/pichincha/services/model/*",
                    "com/pichincha/services/mapper/*"

 

            ])
        }))
    }

 

    reports {
        xml.required = true
        xml.destination file("$buildDir/jacoco/test.xml")
        html.destination file("$buildDir/jacoco/index.html")
        html.required = true
        csv.required = true
    }
}
